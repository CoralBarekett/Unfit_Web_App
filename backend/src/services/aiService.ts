/* eslint-disable @typescript-eslint/no-explicit-any */
// aiService.ts
import axios from "axios";
import dotenv from "dotenv";
//import rateLimit from "express-rate-limit";

dotenv.config();
dotenv.config();
console.log("dotenv config loaded:", process.env.GEMINI_API_KEY ? "Success" : "Failed");

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

console.log("API Key starts with:", GEMINI_API_KEY ? GEMINI_API_KEY.substring(0, 5) + "..." : "undefined");

class AIService {
  async generateContentWithGemini(prompt: string): Promise<string> {
    try {
      console.log("Sending request to Gemini API with prompt:", prompt);
      
      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;
      
      const payload = {
        contents: [{ parts: [{ text: prompt }] }]
      };
      console.log("Request payload:", JSON.stringify(payload));
      
      const response = await axios.post(url, payload, {
        headers: {
          "Content-Type": "application/json",
        },
      });
      
      console.log("Gemini API response status:", response.status);
      console.log("Response data structure:", Object.keys(response.data));
      
      if (!response.data.candidates || response.data.candidates.length === 0) {
        console.error("No candidates in response:", JSON.stringify(response.data));
        throw new Error("No content generated by Gemini API");
      }
      
      return response.data.candidates[0].content.parts[0].text;
    } catch (error: any) {
      console.error("Error generating content with Gemini:");
      
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.error("Status:", error.response.status);
        console.error("Response data:", JSON.stringify(error.response.data));
        console.error("Headers:", JSON.stringify(error.response.headers));
        throw new Error(`Gemini API error: ${error.response.status} - ${JSON.stringify(error.response.data)}`);
      } else if (error.request) {
        // The request was made but no response was received
        console.error("No response received. Request:", error.request);
        throw new Error("No response received from Gemini API");
      } else {
        // Something happened in setting up the request
        console.error("Error message:", error.message);
        throw new Error(`Request setup error: ${error.message}`);
      }
    }
  }

  async generateContent(prompt: string): Promise<string> {
    if (!GEMINI_API_KEY) {
      console.error("Missing Gemini API key in environment variables");
      throw new Error("Gemini API key not configured");
    }
    return this.generateContentWithGemini(prompt);
  }
}

export default new AIService();